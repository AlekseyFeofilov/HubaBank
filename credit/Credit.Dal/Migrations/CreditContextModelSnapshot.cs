// <auto-generated />
using System;
using Credit.Dal;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Credit.Dal.Migrations
{
    [DbContext(typeof(CreditContext))]
    partial class CreditContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("credit_db")
                .HasAnnotation("ProductVersion", "6.0.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Credit.Dal.Models.Credit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<long>("AccountsPayable")
                        .HasColumnType("bigint");

                    b.Property<long>("Arrears")
                        .HasColumnType("bigint");

                    b.Property<long>("ArrearsInterest")
                        .HasColumnType("bigint");

                    b.Property<Guid>("BillId")
                        .HasColumnType("uuid");

                    b.Property<int>("CollectionDay")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("CompletionDate")
                        .HasColumnType("date");

                    b.Property<Guid?>("CreditTermsId")
                        .HasColumnType("uuid");

                    b.Property<long>("Fine")
                        .HasColumnType("bigint");

                    b.Property<float>("InterestRate")
                        .HasColumnType("real");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateOnly>("LastArrearsUpdate")
                        .HasColumnType("date");

                    b.Property<long>("Principal")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreditTermsId");

                    b.ToTable("Credits", "credit_db");
                });

            modelBuilder.Entity("Credit.Dal.Models.CreditTerms", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("InterestRate")
                        .HasColumnType("real");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CreditTerms", "credit_db");
                });

            modelBuilder.Entity("Credit.Dal.Models.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("Arrears")
                        .HasColumnType("bigint");

                    b.Property<Guid>("CreditId")
                        .HasColumnType("uuid");

                    b.Property<long>("PaymentAmount")
                        .HasColumnType("bigint");

                    b.Property<DateOnly>("PaymentDay")
                        .HasColumnType("date");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreditId");

                    b.ToTable("Payments", "credit_db");
                });

            modelBuilder.Entity("Credit.Dal.Models.Credit", b =>
                {
                    b.HasOne("Credit.Dal.Models.CreditTerms", "CreditTerms")
                        .WithMany()
                        .HasForeignKey("CreditTermsId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreditTerms");
                });

            modelBuilder.Entity("Credit.Dal.Models.Payment", b =>
                {
                    b.HasOne("Credit.Dal.Models.Credit", "Credit")
                        .WithMany()
                        .HasForeignKey("CreditId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Credit");
                });
#pragma warning restore 612, 618
        }
    }
}
